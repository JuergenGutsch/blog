<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
    <title>About ASP.NET and more...</title>
    <link>http://blog.gutsch-online.de/</link>
    <atom:link href="http://blog.gutsch-online.de/rss.xml" rel="self" type="application/rss+xml" />
    <description>This feed containes technical articles about web development with ASP.NET and some more things about .NET and related technologies</description>
    <language>en-us</language>
    <pubDate>Mi, 18 Nov 2015 08:48:31 %z</pubDate>
    <lastBuildDate>Mi, 18 Nov 2015 08:48:31 %z</lastBuildDate>

    
    <item>
      <title>Moving .NET libraries to .NET Core</title>
      <link>http://blog.gutsch-online.de//2015/11/20/move-libraries-to-net-core.html</link>
      <pubDate>Fr, 20 Nov 2015 00:00:00 %z</pubDate>
      <author>Jürgen Gutsch</author>
      <guid>http://blog.gutsch-online.de//2015/11/20/move-libraries-to-net-core.html</guid>
      <description>&lt;p&gt;Albert Weinert told us at the MVP Summit 2015 that ASP.NET has a huge problem: Almost all of our favorite tools ar not usable with .NET Core. Many unit test frameworks, IoC containers,  almost all mocking frameworks will not work with .NET Core and needs to be moved to be portable. Additionally amost all mocking frameworks are based on the Castle.Core library, which also needs to be moved to be portable.&lt;/p&gt;
&lt;p&gt;Currently I&apos;m working at LightCore to make it compatible to .NET Core, to make the world a little better ;) This needs some steps to do. More details are in a separate blog post about LightCore 2.0. Beause the unit tests of LightCore don&apos;t use mocking tools this was easier than expected.&lt;/p&gt;
&lt;p&gt;With this post I want to tell you, what you need to do to move your library to .NET Core. I will use the &apos;Simple Object Store&apos; to make a step by step tutorial. At the end my open source library will be compatible with .NET Core :)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Aber warum sollte ich das tun? Verbaue ich mir da nichts? Was bringt der Aufwand? 
Zuerst muss man wissen, dass DNX-Libraries (wie die .NET Core Bibliotheken genannt werden) nichts anderes als Portable Class Libraries sind. Der einzige Unterscheid besteht darin, dass Portable Class Libraries DLLs auswerfen und DNX-Projekte NuGet-Packages erzeugen. Alles andere ist identisch. Die Assemblies ist also auf vielen Plattformen und mit vielen Frameworks einsetzbar. Wenn ich also eine Bibliothek als DNX-Projekt erstelle, kann ich also das .NET Framework. .NET Core, Windows 10 und Mono unterstützen. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Aktueller Stand&lt;/p&gt;
&lt;p&gt;Im Moment besteht die Solution des SOS aus mehreren Framework-Versionsspezifischen Projekten. Diese möchte ich ersetzen durch ein DNX Projekt. Dabei möchte ich alles unter .NET 4.0 eigentlich nicht mehr unterstützen. (Euer Feedback wird mich eventuell eines besseren belehren.) Die Testprojekte werde ich ggf. belassen aber durch .NET-Core basierte Tests mit XUnit ergänzen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AppVeyor: A simple build server for open source projects</title>
      <link>http://blog.gutsch-online.de//2015/11/17/build-lightcore-with-appveyor.html</link>
      <pubDate>Di, 17 Nov 2015 00:00:00 %z</pubDate>
      <author>Jürgen Gutsch</author>
      <guid>http://blog.gutsch-online.de//2015/11/17/build-lightcore-with-appveyor.html</guid>
      <description>&lt;p&gt;For LightCore 2.0 I would like to show the build state inside the GitHub repository. I could use my personal Jenkins build server on a Azure VM, because Jenkins also brovides the build state, with a plug-in.&lt;/p&gt;
&lt;p&gt;But this seems to be the right moment to play around with AppVeyor:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ci.appveyor.com/project/JuergenGutsch/lightcore&quot;&gt;https://ci.appveyor.com/project/JuergenGutsch/lightcore&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;AppVeyor is a browser based SaaS (Software as a Service) application in the cloud. AppVeyor provides many useful features within a pretty simple, intuitive and clean UI. GitHub is completely integrated and it is really easy to create a build job for a GitHub project:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-General.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The .NET Version Manager (DNVM) is already installed and you only need to figure out which runtime is used by default. I used the build output to see the results of the &amp;quot;dnvm&amp;quot; commands. Finally I choosed the way to install the needed Beta-8 with the batch scripts, every time the build starts:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Environment.png&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dnvm update-self
dnvm install 1.0.0-beta8 -a x86 -r coreclr -OS win 
dnvm alias lccoreclr 1.0.0-beta8 -a x86 -r coreclr -OS win 
dnvm install 1.0.0-beta8 -a x86 -r clr -OS win
dnvm alias lcclr 1.0.0-beta8 -a x86 -r clr -OS win
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the builds and the tests I also used the batch command mode with the following lines:&lt;/p&gt;
&lt;p&gt;Build:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Build.png&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd LightCore 
dnvm use lccoreclr 
dnu restore 
dnu build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Tests.png&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd ..\LightCore.Tests 
dnvm use lccoreclr 
dnu restore 
dnx test 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Show the build state&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Finally I&apos;m able to copy a small piece of MarkDown code, which I can use in the readme.md file in the GitHub repository to show the current build state:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/AppVeyor-Badge.png&quot; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[![Build status](https://ci.appveyor.com/api/projects/status/et1fpjlmnsrkw3mv?svg=true)](https://ci.appveyor.com/project/JuergenGutsch/lightcore)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;https://ci.appveyor.com/api/projects/status/et1fpjlmnsrkw3mv?svg=true&quot; alt=&quot;Build Status&quot; /&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it is pretty simple to use and handle AppVeyor. I&apos;m sure I&apos;ll also use AppVeyor for my other open source project, the &amp;quot;SimpleObjectStore&amp;quot;. But I need to move that library to .NET Core first. ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LightCore 2.0</title>
      <link>http://blog.gutsch-online.de//2015/11/16/lightcore20.html</link>
      <pubDate>Mo, 16 Nov 2015 00:00:00 %z</pubDate>
      <author>Jürgen Gutsch</author>
      <guid>http://blog.gutsch-online.de//2015/11/16/lightcore20.html</guid>
      <description>&lt;p&gt;At the MVP Summit 2015 we had a Hackthon with the guys from the ASP.NET product group to support ASP.NET 5. There were Ideas to improve the documentation, to upgrade samples to the newest beta version or to upgrade older libraries to .NET Core.&lt;/p&gt;
&lt;p&gt;It was Albert Weinert who asked me to upgrade LightCore to .NET Core. The more I thought about this idea, the more I liked it. So I decided to move LightCore to .Net Core :)&lt;/p&gt;
&lt;p&gt;To change the main library wasn&apos;t a big deal. I simply created a new DNX library and added the existing code files to the new libraries. I had to solve only three small issues, which is explaned a little later. &lt;/p&gt;
&lt;p&gt;The biggest effort was to change all the unit tests from NUnit to Xunit, because NUnit is unfortunatly not yet compatible to .NET Core. Whyle changing the test framewor I also changed the assertions to FluentAssertion to be save in the future, if we need to change the the test framework again.&lt;/p&gt;
&lt;h2&gt;Current status&lt;/h2&gt;
&lt;p&gt;In the new version I did a hard cut with Silverlight and the Compact Framework. I don&apos;t want to support this old versions. If the .NET core libraries are compatible with that two frameworks, this will only be by accident ;)&lt;/p&gt;
&lt;p&gt;This version will support .NET Core 5, UWP10, .NET Framework and Mono. ASP.NET 4.6 and ASP.NET 5 is also supported. &lt;/p&gt;
&lt;p&gt;The XAML-Reader is not available in .NET Core, which means the XAML configuration will only work in with .NET Framework. In .NET Core a JSON configuration should be used instead, which is additionally available for all other Frameworks. The configuration by code is still possible and is the recommended way to configure the IoC container.&lt;/p&gt;
&lt;p&gt;The old web integration will not be changed, to stay compatible to MVC 3 and 4. This library only uses the new .NET Framework version of the LightCore main library. Additionally we will add a ASP.NET 5 integration to replace the build in IoC with LightCore.&lt;/p&gt;
&lt;p&gt;The ThreadSingeltonLifecycle is currently not working in the .NET Core version, because System.Threading.Thread is not available in .NET Core. We need to find another solution to identify the current thread. This livecycle only works in .NET Framework.&lt;/p&gt;
&lt;p&gt;In case of reflection to get the properties to inject, the BindingFlags.SetProperty is not availyble in .NET Core. This means there are possibly some performance issues, while fetching and validating the property setter.&lt;/p&gt;
&lt;p&gt;Another issue ist the CommonServiceLocator, because the ServiceLocatorImplBase of the Microsoft.Practices.ServiceLocation is also not yet available in .NET Core. So the CommonServiceLocator is only working with .NET Framework. Maybe it is needed to build an own ServiceLocator.&lt;/p&gt;
&lt;p&gt;With the unit tests of LightCore.Configuration we had problems with three tests which were failing, if they are not running individually. This is because the Xunit tests where run in parallel and the RegistrationLoader in LightCore is not ThreadSave. Thsi guy mus not be thread save, but we needed to wrapp all tests with an lock statement which are using RegistrationLoader.Instance.Register() to solve that problem.&lt;/p&gt;
&lt;p&gt;A public build server is set up with AppVeyor, but we also need to integrate the other libraries into this build.&lt;/p&gt;
&lt;h2&gt;More ideas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Property injection should only work with an marker attribute to improve the performance&lt;/li&gt;
&lt;li&gt;Some users want to have the named instances back in LightCore. I beleave we should add this feature again. It is  definetly not a nice pattern to use named instances, but as always in the real world we can&apos;t use all the nice patterns every time&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Call for contributions&lt;/h2&gt;
&lt;p&gt;A salready writtern, we need to change the Web Integrations and the samples, documentations and the performance tests, thogh. You are able to follow the current development process on the related feature branch: &lt;a href=&quot;https://github.com/juergengutsch/lightcore/tree/jg/portable&quot;&gt;https://github.com/juergengutsch/lightcore/tree/jg/portable&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It would be pretty cool, if you would contribute some ideas, suggestions and issues directly on GitHub. Please also feel free to send us code contributions via pull requests :)&lt;/p&gt;
&lt;p&gt;We would like to make LightCore one of the best IoC containers for .NET Core :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>http://blog.gutsch-online.de//2015/11/16/myfirstpost.html</link>
      <pubDate>Mo, 16 Nov 2015 00:00:00 %z</pubDate>
      <author>Jürgen Gutsch</author>
      <guid>http://blog.gutsch-online.de//2015/11/16/myfirstpost.html</guid>
      <description>&lt;h2&gt;Hello world...&lt;/h2&gt;
&lt;p&gt;I stopped writing on http://www.aspnetzone.de/blogs/juergengutsch/ and changed the blog to a more flexible and agile system based on Pretzel. Pretzel is a Jekyll clone written in .NET using a funny API. You need to &apos;bake&apos; and to &apos;taste&apos; your Pretzel blog to view your latest changes in your browser locally. At least you need to &apos;bake&apos; your Pretzel blog before you are able to deliver your changes to the server.&lt;/p&gt;
&lt;p&gt;For me it is pretty useful to write the contents offline in a Markdown editor while sitting in the train.&lt;/p&gt;
&lt;p&gt;I also switched to English because I used to sepeak and to write english almost every day. And this is also a way to get more experience in writing and speaking English. Please feel free to send me notes about spelling errors :)&lt;/p&gt;
&lt;p&gt;Hopefully this is also fine for the most of the German speaking guys who are reading my blog. Currently I have around 1000 activities per day via the FeedBurner feed and around 400 views per day directly on the articles. If yoou are not happy about the English posts, please drop me a note. Maybe it is possible to share the contents in German too.&lt;/p&gt;
&lt;p&gt;From time to time I will translate the most important blog posts of the old system to use it in the new system. I will select the specific posts by the number of reads.&lt;/p&gt;
</description>
    </item>
    

  </channel> 
</rss>